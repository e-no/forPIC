

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Fri Feb 13 14:47:16 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	12F1822
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	dabs	1,0x7E,2
    18  0000                     	;# 
    19  0001                     	;# 
    20  0002                     	;# 
    21  0003                     	;# 
    22  0004                     	;# 
    23  0005                     	;# 
    24  0006                     	;# 
    25  0007                     	;# 
    26  0008                     	;# 
    27  0009                     	;# 
    28  000A                     	;# 
    29  000B                     	;# 
    30  000C                     	;# 
    31  0011                     	;# 
    32  0012                     	;# 
    33  0015                     	;# 
    34  0016                     	;# 
    35  0016                     	;# 
    36  0017                     	;# 
    37  0018                     	;# 
    38  0019                     	;# 
    39  001A                     	;# 
    40  001B                     	;# 
    41  001C                     	;# 
    42  001E                     	;# 
    43  001F                     	;# 
    44  008C                     	;# 
    45  0091                     	;# 
    46  0092                     	;# 
    47  0095                     	;# 
    48  0096                     	;# 
    49  0097                     	;# 
    50  0098                     	;# 
    51  0099                     	;# 
    52  009A                     	;# 
    53  009B                     	;# 
    54  009B                     	;# 
    55  009C                     	;# 
    56  009D                     	;# 
    57  009E                     	;# 
    58  010C                     	;# 
    59  0111                     	;# 
    60  0112                     	;# 
    61  0115                     	;# 
    62  0116                     	;# 
    63  0117                     	;# 
    64  0118                     	;# 
    65  0119                     	;# 
    66  011A                     	;# 
    67  011B                     	;# 
    68  011D                     	;# 
    69  011D                     	;# 
    70  018C                     	;# 
    71  0191                     	;# 
    72  0191                     	;# 
    73  0192                     	;# 
    74  0193                     	;# 
    75  0193                     	;# 
    76  0193                     	;# 
    77  0194                     	;# 
    78  0195                     	;# 
    79  0196                     	;# 
    80  0199                     	;# 
    81  019A                     	;# 
    82  019B                     	;# 
    83  019B                     	;# 
    84  019B                     	;# 
    85  019B                     	;# 
    86  019C                     	;# 
    87  019C                     	;# 
    88  019D                     	;# 
    89  019E                     	;# 
    90  019F                     	;# 
    91  020C                     	;# 
    92  0211                     	;# 
    93  0211                     	;# 
    94  0212                     	;# 
    95  0212                     	;# 
    96  0213                     	;# 
    97  0213                     	;# 
    98  0214                     	;# 
    99  0214                     	;# 
   100  0215                     	;# 
   101  0215                     	;# 
   102  0215                     	;# 
   103  0216                     	;# 
   104  0216                     	;# 
   105  0217                     	;# 
   106  0217                     	;# 
   107  0291                     	;# 
   108  0291                     	;# 
   109  0292                     	;# 
   110  0293                     	;# 
   111  0294                     	;# 
   112  0295                     	;# 
   113  0295                     	;# 
   114  0296                     	;# 
   115  0391                     	;# 
   116  0392                     	;# 
   117  0393                     	;# 
   118  039A                     	;# 
   119  039C                     	;# 
   120  039D                     	;# 
   121  039E                     	;# 
   122  039F                     	;# 
   123  0FE4                     	;# 
   124  0FE5                     	;# 
   125  0FE6                     	;# 
   126  0FE7                     	;# 
   127  0FE8                     	;# 
   128  0FE9                     	;# 
   129  0FEA                     	;# 
   130  0FEB                     	;# 
   131  0FED                     	;# 
   132  0FEE                     	;# 
   133  0FEF                     	;# 
   134  0000                     	;# 
   135  0001                     	;# 
   136  0002                     	;# 
   137  0003                     	;# 
   138  0004                     	;# 
   139  0005                     	;# 
   140  0006                     	;# 
   141  0007                     	;# 
   142  0008                     	;# 
   143  0009                     	;# 
   144  000A                     	;# 
   145  000B                     	;# 
   146  000C                     	;# 
   147  0011                     	;# 
   148  0012                     	;# 
   149  0015                     	;# 
   150  0016                     	;# 
   151  0016                     	;# 
   152  0017                     	;# 
   153  0018                     	;# 
   154  0019                     	;# 
   155  001A                     	;# 
   156  001B                     	;# 
   157  001C                     	;# 
   158  001E                     	;# 
   159  001F                     	;# 
   160  008C                     	;# 
   161  0091                     	;# 
   162  0092                     	;# 
   163  0095                     	;# 
   164  0096                     	;# 
   165  0097                     	;# 
   166  0098                     	;# 
   167  0099                     	;# 
   168  009A                     	;# 
   169  009B                     	;# 
   170  009B                     	;# 
   171  009C                     	;# 
   172  009D                     	;# 
   173  009E                     	;# 
   174  010C                     	;# 
   175  0111                     	;# 
   176  0112                     	;# 
   177  0115                     	;# 
   178  0116                     	;# 
   179  0117                     	;# 
   180  0118                     	;# 
   181  0119                     	;# 
   182  011A                     	;# 
   183  011B                     	;# 
   184  011D                     	;# 
   185  011D                     	;# 
   186  018C                     	;# 
   187  0191                     	;# 
   188  0191                     	;# 
   189  0192                     	;# 
   190  0193                     	;# 
   191  0193                     	;# 
   192  0193                     	;# 
   193  0194                     	;# 
   194  0195                     	;# 
   195  0196                     	;# 
   196  0199                     	;# 
   197  019A                     	;# 
   198  019B                     	;# 
   199  019B                     	;# 
   200  019B                     	;# 
   201  019B                     	;# 
   202  019C                     	;# 
   203  019C                     	;# 
   204  019D                     	;# 
   205  019E                     	;# 
   206  019F                     	;# 
   207  020C                     	;# 
   208  0211                     	;# 
   209  0211                     	;# 
   210  0212                     	;# 
   211  0212                     	;# 
   212  0213                     	;# 
   213  0213                     	;# 
   214  0214                     	;# 
   215  0214                     	;# 
   216  0215                     	;# 
   217  0215                     	;# 
   218  0215                     	;# 
   219  0216                     	;# 
   220  0216                     	;# 
   221  0217                     	;# 
   222  0217                     	;# 
   223  0291                     	;# 
   224  0291                     	;# 
   225  0292                     	;# 
   226  0293                     	;# 
   227  0294                     	;# 
   228  0295                     	;# 
   229  0295                     	;# 
   230  0296                     	;# 
   231  0391                     	;# 
   232  0392                     	;# 
   233  0393                     	;# 
   234  039A                     	;# 
   235  039C                     	;# 
   236  039D                     	;# 
   237  039E                     	;# 
   238  039F                     	;# 
   239  0FE4                     	;# 
   240  0FE5                     	;# 
   241  0FE6                     	;# 
   242  0FE7                     	;# 
   243  0FE8                     	;# 
   244  0FE9                     	;# 
   245  0FEA                     	;# 
   246  0FEB                     	;# 
   247  0FED                     	;# 
   248  0FEE                     	;# 
   249  0FEF                     	;# 
   250                           
   251                           	psect	stringtext
   252  0300                     __pstringtext:	
   253  0300                     _dpowers:	
   254  0300  3401               	retlw	1
   255  0301  3400               	retlw	0
   256  0302  340A               	retlw	10
   257  0303  3400               	retlw	0
   258  0304  3464               	retlw	100
   259  0305  3400               	retlw	0
   260  0306  34E8               	retlw	232
   261  0307  3403               	retlw	3
   262  0308  3410               	retlw	16
   263  0309  3427               	retlw	39
   264  030A                     __end_of_dpowers:	
   265  0011                     _PIR1bits	set	17
   266  000C                     _PORTA	set	12
   267  001B                     _PR2	set	27
   268  001C                     _T2CON	set	28
   269  0015                     _TMR0	set	21
   270  001A                     _TMR2	set	26
   271  005F                     _GIE	set	95
   272  0060                     _RA0	set	96
   273  0061                     _RA1	set	97
   274  0062                     _RA2	set	98
   275  005D                     _TMR0IE	set	93
   276  005A                     _TMR0IF	set	90
   277  00E2                     _TMR2ON	set	226
   278  0095                     _OPTION_REG	set	149
   279  0099                     _OSCCON	set	153
   280  008C                     _TRISA	set	140
   281  08EF                     _RXDTSEL	set	2287
   282  08EA                     _TXCKSEL	set	2282
   283  018C                     _ANSELAbits	set	396
   284  019D                     _RCSTA	set	413
   285  019B                     _SPBRG	set	411
   286  019A                     _TXREG	set	410
   287  019E                     _TXSTA	set	414
   288  0293                     _CCP1CON	set	659
   289  0292                     _CCPR1H	set	658
   290  0291                     _CCPR1L	set	657
   291  030A                     __stringdata:	
   292  030A                     STR_1:	
   293  030A  3476               	retlw	118	;'v'
   294  030B  3461               	retlw	97	;'a'
   295  030C  346C               	retlw	108	;'l'
   296  030D  3475               	retlw	117	;'u'
   297  030E  3465               	retlw	101	;'e'
   298  030F  343A               	retlw	58	;':'
   299  0310  3425               	retlw	37	;'%'
   300  0311  3464               	retlw	100	;'d'
   301  0312  3420               	retlw	32	;' '
   302  0313  340A               	retlw	10
   303  0314  340D               	retlw	13
   304  0315  3400               	retlw	0
   305  0316                     __end_of__stringdata:	
   306                           
   307                           ; #config settings
   308  0000                     
   309                           	psect	cinit
   310  0031                     start_initialization:	
   311  0031                     __initialization:	
   312                           
   313                           ; Clear objects allocated to COMMON
   314  0031  01FA               	clrf	__pbssCOMMON& (0+127)
   315  0032  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   316                           
   317                           ; Clear objects allocated to BANK0
   318  0033  01C7               	clrf	__pbssBANK0& (0+127)
   319  0034  01C8               	clrf	(__pbssBANK0+1)& (0+127)
   320  0035  01C9               	clrf	(__pbssBANK0+2)& (0+127)
   321  0036  01CA               	clrf	(__pbssBANK0+3)& (0+127)
   322  0037  01CB               	clrf	(__pbssBANK0+4)& (0+127)
   323  0038  01CC               	clrf	(__pbssBANK0+5)& (0+127)
   324  0039  01CD               	clrf	(__pbssBANK0+6)& (0+127)
   325  003A  01CE               	clrf	(__pbssBANK0+7)& (0+127)
   326  003B  01CF               	clrf	(__pbssBANK0+8)& (0+127)
   327  003C  01D0               	clrf	(__pbssBANK0+9)& (0+127)
   328  003D  01D1               	clrf	(__pbssBANK0+10)& (0+127)
   329  003E  01D2               	clrf	(__pbssBANK0+11)& (0+127)
   330  003F                     end_of_initialization:	
   331                           ;End of C runtime variable initialization code
   332                           
   333  003F                     __end_of__initialization:	
   334  003F  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
   335  0040  0020               	movlb	0
   336  0041  298E               	ljmp	_main	;jump to C main() function
   337                           
   338                           	psect	bssCOMMON
   339  007A                     __pbssCOMMON:	
   340  007A                     main@led_flag:	
   341  007A                     	ds	2
   342                           
   343                           	psect	bssBANK0
   344  0047                     __pbssBANK0:	
   345  0047                     _data:	
   346  0047                     	ds	8
   347  004F                     _Count:	
   348  004F                     	ds	2
   349  0051                     _LEDflg:	
   350  0051                     	ds	2
   351                           
   352                           	psect	cstackCOMMON
   353  0070                     __pcstackCOMMON:	
   354  0070                     ?_main:	
   355  0070                     ?_InterTimer:	
   356                           ; 0 bytes @ 0x0
   357                           
   358  0070                     ??_InterTimer:	
   359                           ; 0 bytes @ 0x0
   360                           
   361  0070                     InfraredRecive@MyDeviceNo:	
   362                           ; 0 bytes @ 0x0
   363                           
   364                           
   365                           ; 1 bytes @ 0x0
   366  0070                     	ds	2
   367  0072                     ?_strOutUSART:	
   368  0072                     ?_InfraredRecive:	
   369                           ; 0 bytes @ 0x2
   370                           
   371  0072                     ?___lwdiv:	
   372                           ; 2 bytes @ 0x2
   373                           
   374  0072                     strOutUSART@str:	
   375                           ; 2 bytes @ 0x2
   376                           
   377  0072                     ___lwdiv@divisor:	
   378                           ; 2 bytes @ 0x2
   379                           
   380                           
   381                           ; 2 bytes @ 0x2
   382  0072                     	ds	2
   383  0074                     ??_InfraredRecive:	
   384  0074                     ??_strOutUSART:	
   385                           ; 0 bytes @ 0x4
   386                           
   387  0074                     ___lwdiv@dividend:	
   388                           ; 0 bytes @ 0x4
   389                           
   390                           
   391                           ; 2 bytes @ 0x4
   392  0074                     	ds	2
   393  0076                     ??___lwdiv:	
   394                           
   395                           ; 0 bytes @ 0x6
   396  0076                     	ds	1
   397  0077                     ___lwdiv@quotient:	
   398                           
   399                           ; 2 bytes @ 0x7
   400  0077                     	ds	2
   401  0079                     ___lwdiv@counter:	
   402                           
   403                           ; 1 bytes @ 0x9
   404  0079                     	ds	1
   405                           
   406                           	psect	cstackBANK0
   407  0020                     __pcstackBANK0:	
   408  0020                     ?___lwmod:	
   409  0020                     ___lwmod@divisor:	
   410                           ; 2 bytes @ 0x0
   411                           
   412  0020                     InfraredRecive@IRbit:	
   413                           ; 2 bytes @ 0x0
   414                           
   415                           
   416                           ; 26 bytes @ 0x0
   417  0020                     	ds	2
   418  0022                     ___lwmod@dividend:	
   419                           
   420                           ; 2 bytes @ 0x2
   421  0022                     	ds	2
   422  0024                     ??___lwmod:	
   423                           
   424                           ; 0 bytes @ 0x4
   425  0024                     	ds	1
   426  0025                     ___lwmod@counter:	
   427                           
   428                           ; 1 bytes @ 0x5
   429  0025                     	ds	1
   430  0026                     ?_sprintf:	
   431  0026                     sprintf@sp:	
   432                           ; 2 bytes @ 0x6
   433                           
   434                           
   435                           ; 2 bytes @ 0x6
   436  0026                     	ds	2
   437  0028                     sprintf@f:	
   438                           
   439                           ; 2 bytes @ 0x8
   440  0028                     	ds	4
   441  002C                     ??_sprintf:	
   442                           
   443                           ; 0 bytes @ 0xC
   444  002C                     	ds	4
   445  0030                     sprintf@ap:	
   446                           
   447                           ; 1 bytes @ 0x10
   448  0030                     	ds	1
   449  0031                     sprintf@flag:	
   450                           
   451                           ; 1 bytes @ 0x11
   452  0031                     	ds	1
   453  0032                     sprintf@prec:	
   454                           
   455                           ; 1 bytes @ 0x12
   456  0032                     	ds	1
   457  0033                     sprintf@_val:	
   458                           
   459                           ; 4 bytes @ 0x13
   460  0033                     	ds	4
   461  0037                     sprintf@c:	
   462                           
   463                           ; 1 bytes @ 0x17
   464  0037                     	ds	3
   465  003A                     InfraredRecive@ans:	
   466                           
   467                           ; 2 bytes @ 0x1A
   468  003A                     	ds	2
   469  003C                     InfraredRecive@t:	
   470                           
   471                           ; 4 bytes @ 0x1C
   472  003C                     	ds	4
   473  0040                     InfraredRecive@i:	
   474                           
   475                           ; 2 bytes @ 0x20
   476  0040                     	ds	2
   477  0042                     ??_main:	
   478                           
   479                           ; 0 bytes @ 0x22
   480  0042                     	ds	3
   481  0045                     main@str:	
   482  0045                     main@ans:	
   483                           ; 0 bytes @ 0x25
   484                           
   485                           
   486                           ; 2 bytes @ 0x25
   487  0045                     	ds	2
   488                           
   489                           	psect	maintext
   490  018E                     __pmaintext:	
   491 ;;
   492 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   493 ;;
   494 ;; *************** function _main *****************
   495 ;; Defined at:
   496 ;;		line 45 in file "main.c"
   497 ;; Parameters:    Size  Location     Type
   498 ;;		None
   499 ;; Auto vars:     Size  Location     Type
   500 ;;  ans             2   37[BANK0 ] int 
   501 ;;  str             0   37[BANK0 ] unsigned char [0]
   502 ;; Return value:  Size  Location     Type
   503 ;;		None               void
   504 ;; Registers used:
   505 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   506 ;; Tracked objects:
   507 ;;		On entry : 17F/0
   508 ;;		On exit  : 0/0
   509 ;;		Unchanged: 0/0
   510 ;; Data sizes:     COMMON   BANK0   BANK1
   511 ;;      Params:         0       0       0
   512 ;;      Locals:         0       2       0
   513 ;;      Temps:          0       3       0
   514 ;;      Totals:         0       5       0
   515 ;;Total ram usage:        5 bytes
   516 ;; Hardware stack levels required when called:    3
   517 ;; This function calls:
   518 ;;		_InfraredRecive
   519 ;;		_sprintf
   520 ;;		_strOutUSART
   521 ;; This function is called by:
   522 ;;		Startup code after reset
   523 ;; This function uses a non-reentrant model
   524 ;;
   525                           
   526                           
   527                           ;psect for function _main
   528  018E                     _main:	
   529                           
   530                           ;main.c: 47: static short int led_flag = 0;
   531                           ;main.c: 48: int ans;
   532                           ;main.c: 49: char str[];
   533                           ;main.c: 51: OSCCON = 0b01110010;
   534                           
   535                           ;incstack = 0
   536                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   537  018E  3072               	movlw	114
   538  018F  0021               	movlb	1	; select bank1
   539  0190  0099               	movwf	25	;volatile
   540                           
   541                           ;main.c: 52: ANSELAbits.ANSELA = 0b00000000;
   542  0191  30E0               	movlw	-32
   543  0192  0023               	movlb	3	; select bank3
   544  0193  058C               	andwf	12,f	;volatile
   545                           
   546                           ;main.c: 53: TRISA = 0b00001001;
   547  0194  3009               	movlw	9
   548  0195  0021               	movlb	1	; select bank1
   549  0196  008C               	movwf	12	;volatile
   550                           
   551                           ;main.c: 54: PORTA = 0b00000000;
   552  0197  0020               	movlb	0	; select bank0
   553  0198  018C               	clrf	12	;volatile
   554                           
   555                           ;main.c: 56: RXDTSEL = 1;
   556  0199  0022               	movlb	2	; select bank2
   557  019A  179D               	bsf	29,7	;volatile
   558                           
   559                           ;main.c: 57: TXCKSEL = 1;
   560  019B  151D               	bsf	29,2	;volatile
   561                           
   562                           ;main.c: 58: TXSTA = 0b00100100;
   563  019C  3024               	movlw	36
   564  019D  0023               	movlb	3	; select bank3
   565  019E  009E               	movwf	30	;volatile
   566                           
   567                           ;main.c: 59: RCSTA = 0b10010000;
   568  019F  3090               	movlw	144
   569  01A0  009D               	movwf	29	;volatile
   570                           
   571                           ;main.c: 60: SPBRG = 51;
   572  01A1  3033               	movlw	51
   573  01A2  009B               	movwf	27	;volatile
   574                           
   575                           ;main.c: 62: OPTION_REG = 0b00000110;
   576  01A3  3006               	movlw	6
   577  01A4  0021               	movlb	1	; select bank1
   578  01A5  0095               	movwf	21	;volatile
   579                           
   580                           ;main.c: 63: TMR0 = 61;
   581  01A6  303D               	movlw	61
   582  01A7  0020               	movlb	0	; select bank0
   583  01A8  0095               	movwf	21	;volatile
   584                           
   585                           ;main.c: 64: TMR0IF = 0;
   586  01A9  110B               	bcf	11,2	;volatile
   587                           
   588                           ;main.c: 65: Count = 0;
   589  01AA  01CF               	clrf	_Count
   590  01AB  01D0               	clrf	_Count+1
   591                           
   592                           ;main.c: 66: TMR0IE = 1;
   593  01AC  168B               	bsf	11,5	;volatile
   594                           
   595                           ;main.c: 67: GIE = 1;
   596  01AD  178B               	bsf	11,7	;volatile
   597                           
   598                           ;main.c: 69: LEDflg = 0;
   599  01AE  01D1               	clrf	_LEDflg
   600  01AF  01D2               	clrf	_LEDflg+1
   601                           
   602                           ;main.c: 71: _delay((unsigned long)((200)*(32000000/4000.0)));
   603  01B0  3009               	movlw	9
   604  01B1  00C4               	movwf	??_main+2
   605  01B2  301E               	movlw	30
   606  01B3  00C3               	movwf	??_main+1
   607  01B4  30EB               	movlw	235
   608  01B5  00C2               	movwf	??_main
   609  01B6                     u1107:	
   610  01B6  0BC2               	decfsz	??_main,f
   611  01B7  29B6               	goto	u1107
   612  01B8  0BC3               	decfsz	??_main+1,f
   613  01B9  29B6               	goto	u1107
   614  01BA  0BC4               	decfsz	??_main+2,f
   615  01BB  29B6               	goto	u1107
   616  01BC  0000               	nop
   617  01BD                     l1317:	
   618                           ;main.c: 74: while (1) {
   619                           
   620                           
   621                           ;main.c: 77: RA1 = 1;
   622  01BD  0020               	movlb	0	; select bank0
   623  01BE  148C               	bsf	12,1	;volatile
   624                           
   625                           ;main.c: 78: RA2 = 0;
   626  01BF  110C               	bcf	12,2	;volatile
   627                           
   628                           ;main.c: 79: ans = InfraredRecive(72);
   629  01C0  3048               	movlw	72
   630  01C1  210E               	fcall	_InfraredRecive
   631  01C2  0873               	movf	?_InfraredRecive+1,w
   632  01C3  0020               	movlb	0	; select bank0
   633  01C4  01C6               	clrf	main@ans+1
   634  01C5  07C6               	addwf	main@ans+1,f
   635  01C6  0872               	movf	?_InfraredRecive,w
   636  01C7  01C5               	clrf	main@ans
   637  01C8  07C5               	addwf	main@ans,f
   638                           
   639                           ;main.c: 80: _delay((unsigned long)((100)*(32000000/4000.0)));
   640  01C9  3005               	movlw	5
   641  01CA  00C4               	movwf	??_main+2
   642  01CB  300F               	movlw	15
   643  01CC  00C3               	movwf	??_main+1
   644  01CD  30F4               	movlw	244
   645  01CE  00C2               	movwf	??_main
   646  01CF                     u1117:	
   647  01CF  0BC2               	decfsz	??_main,f
   648  01D0  29CF               	goto	u1117
   649  01D1  0BC3               	decfsz	??_main+1,f
   650  01D2  29CF               	goto	u1117
   651  01D3  0BC4               	decfsz	??_main+2,f
   652  01D4  29CF               	goto	u1117
   653                           
   654                           ;main.c: 84: sprintf(str,"value:%d \n\r",ans);
   655  01D5  3045               	movlw	low main@str
   656  01D6  0020               	movlb	0	; select bank0
   657  01D7  00A6               	movwf	sprintf@sp
   658  01D8  3000               	movlw	high main@str
   659  01D9  00A7               	movwf	sprintf@sp+1
   660  01DA  300A               	movlw	low (STR_1| (0+32768))
   661  01DB  00A8               	movwf	sprintf@f
   662  01DC  3083               	movlw	high (STR_1| (0+32768))
   663  01DD  00A9               	movwf	sprintf@f+1
   664  01DE  0846               	movf	main@ans+1,w
   665  01DF  01AB               	clrf	?_sprintf+5
   666  01E0  07AB               	addwf	?_sprintf+5,f
   667  01E1  0845               	movf	main@ans,w
   668  01E2  01AA               	clrf	?_sprintf+4
   669  01E3  07AA               	addwf	?_sprintf+4,f
   670  01E4  2042               	fcall	_sprintf
   671                           
   672                           ;main.c: 86: strOutUSART(str);
   673  01E5  3045               	movlw	low main@str
   674  01E6  00F2               	movwf	strOutUSART@str
   675  01E7  3000               	movlw	high main@str
   676  01E8  00F3               	movwf	strOutUSART@str+1
   677  01E9  2316               	fcall	_strOutUSART
   678                           
   679                           ;main.c: 88: RA1 = 0;
   680  01EA  0020               	movlb	0	; select bank0
   681  01EB  108C               	bcf	12,1	;volatile
   682                           
   683                           ;main.c: 91: _delay((unsigned long)((100)*(32000000/4000.0)));
   684  01EC  3005               	movlw	5
   685  01ED  00C4               	movwf	??_main+2
   686  01EE  300F               	movlw	15
   687  01EF  00C3               	movwf	??_main+1
   688  01F0  30F4               	movlw	244
   689  01F1  00C2               	movwf	??_main
   690  01F2                     u1127:	
   691  01F2  0BC2               	decfsz	??_main,f
   692  01F3  29F2               	goto	u1127
   693  01F4  0BC3               	decfsz	??_main+1,f
   694  01F5  29F2               	goto	u1127
   695  01F6  0BC4               	decfsz	??_main+2,f
   696  01F7  29F2               	goto	u1127
   697  01F8  29BD               	goto	l1317
   698  01F9                     __end_of_main:	
   699                           
   700                           	psect	text1
   701  0316                     __ptext1:	
   702 ;; *************** function _strOutUSART *****************
   703 ;; Defined at:
   704 ;;		line 113 in file "main.c"
   705 ;; Parameters:    Size  Location     Type
   706 ;;  str             2    2[COMMON] PTR unsigned char 
   707 ;;		 -> main@str(0), 
   708 ;; Auto vars:     Size  Location     Type
   709 ;;		None
   710 ;; Return value:  Size  Location     Type
   711 ;;		None               void
   712 ;; Registers used:
   713 ;;		wreg, fsr1l, fsr1h, status,2, status,0
   714 ;; Tracked objects:
   715 ;;		On entry : 0/0
   716 ;;		On exit  : 0/0
   717 ;;		Unchanged: 0/0
   718 ;; Data sizes:     COMMON   BANK0   BANK1
   719 ;;      Params:         2       0       0
   720 ;;      Locals:         0       0       0
   721 ;;      Temps:          0       0       0
   722 ;;      Totals:         2       0       0
   723 ;;Total ram usage:        2 bytes
   724 ;; Hardware stack levels used:    1
   725 ;; Hardware stack levels required when called:    1
   726 ;; This function calls:
   727 ;;		Nothing
   728 ;; This function is called by:
   729 ;;		_main
   730 ;; This function uses a non-reentrant model
   731 ;;
   732                           
   733                           
   734                           ;psect for function _strOutUSART
   735  0316                     _strOutUSART:	
   736  0316                     l1137:	
   737                           ;main.c: 114: while(*str){
   738                           
   739                           ;incstack = 0
   740                           ; Regs used in _strOutUSART: [wreg+fsr1l+fsr1h+status,2+status,0]
   741                           
   742  0316  0872               	movf	strOutUSART@str,w
   743  0317  0086               	movwf	6
   744  0318  0873               	movf	strOutUSART@str+1,w
   745  0319  0087               	movwf	7
   746  031A  0881               	movf	1,f
   747  031B  1903               	btfsc	3,2
   748  031C  0008               	return
   749  031D                     l70:	
   750                           ;main.c: 115: while(!PIR1bits.TXIF);
   751                           
   752  031D  0020               	movlb	0	; select bank0
   753  031E  1E11               	btfss	17,4	;volatile
   754  031F  2B1D               	goto	l70
   755                           
   756                           ;main.c: 116: TXREG = *str++;
   757  0320  0872               	movf	strOutUSART@str,w
   758  0321  0086               	movwf	6
   759  0322  0873               	movf	strOutUSART@str+1,w
   760  0323  0087               	movwf	7
   761  0324  0801               	movf	1,w
   762  0325  0023               	movlb	3	; select bank3
   763  0326  009A               	movwf	26	;volatile
   764  0327  3001               	movlw	1
   765  0328  07F2               	addwf	strOutUSART@str,f
   766  0329  3000               	movlw	0
   767  032A  3DF3               	addwfc	strOutUSART@str+1,f
   768  032B  2B16               	goto	l1137
   769  032C                     __end_of_strOutUSART:	
   770                           
   771                           	psect	text2
   772  0042                     __ptext2:	
   773 ;; *************** function _sprintf *****************
   774 ;; Defined at:
   775 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
   776 ;; Parameters:    Size  Location     Type
   777 ;;  sp              2    6[BANK0 ] PTR unsigned char 
   778 ;;		 -> main@str(0), 
   779 ;;  f               2    8[BANK0 ] PTR const unsigned char 
   780 ;;		 -> STR_1(12), 
   781 ;; Auto vars:     Size  Location     Type
   782 ;;  _val            4   19[BANK0 ] struct .
   783 ;;  c               1   23[BANK0 ] char 
   784 ;;  prec            1   18[BANK0 ] char 
   785 ;;  flag            1   17[BANK0 ] unsigned char 
   786 ;;  ap              1   16[BANK0 ] PTR void [1]
   787 ;;		 -> ?_sprintf(2), 
   788 ;; Return value:  Size  Location     Type
   789 ;;                  2    6[BANK0 ] int 
   790 ;; Registers used:
   791 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   792 ;; Tracked objects:
   793 ;;		On entry : 0/0
   794 ;;		On exit  : 0/0
   795 ;;		Unchanged: 0/0
   796 ;; Data sizes:     COMMON   BANK0   BANK1
   797 ;;      Params:         0       6       0
   798 ;;      Locals:         0       8       0
   799 ;;      Temps:          0       4       0
   800 ;;      Totals:         0      18       0
   801 ;;Total ram usage:       18 bytes
   802 ;; Hardware stack levels used:    1
   803 ;; Hardware stack levels required when called:    2
   804 ;; This function calls:
   805 ;;		___lwdiv
   806 ;;		___lwmod
   807 ;; This function is called by:
   808 ;;		_main
   809 ;; This function uses a non-reentrant model
   810 ;;
   811                           
   812                           
   813                           ;psect for function _sprintf
   814  0042                     _sprintf:	
   815                           
   816                           ;doprnt.c: 494: va_list ap;
   817                           ;doprnt.c: 499: signed char c;
   818                           ;doprnt.c: 506: signed char prec;
   819                           ;doprnt.c: 508: unsigned char flag;
   820                           ;doprnt.c: 527: union {
   821                           ;doprnt.c: 528: unsigned int _val;
   822                           ;doprnt.c: 529: struct {
   823                           ;doprnt.c: 530: const char * _cp;
   824                           ;doprnt.c: 531: unsigned _len;
   825                           ;doprnt.c: 532: } _str;
   826                           ;doprnt.c: 533: } _val;
   827                           ;doprnt.c: 542: *ap = __va_start();
   828                           
   829                           ;incstack = 0
   830                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   831  0042  302A               	movlw	(?_sprintf+4)& (0+255)
   832  0043  0020               	movlb	0	; select bank0
   833  0044  00AC               	movwf	??_sprintf
   834  0045  082C               	movf	??_sprintf,w
   835  0046  00B0               	movwf	sprintf@ap
   836  0047                     l1277:	
   837                           ;doprnt.c: 545: while(c = *f++) {
   838                           
   839  0047  0829               	movf	sprintf@f+1,w
   840  0048  00AD               	movwf	??_sprintf+1
   841  0049  0828               	movf	sprintf@f,w
   842  004A  00AC               	movwf	??_sprintf
   843  004B  0AA8               	incf	sprintf@f,f
   844  004C  1903               	skipnz
   845  004D  0AA9               	incf	sprintf@f+1,f
   846  004E  082C               	movf	??_sprintf,w
   847  004F  0084               	movwf	4
   848  0050  082D               	movf	??_sprintf+1,w
   849  0051  0085               	movwf	5
   850  0052  0800               	movf	0,w	;code access
   851  0053  00AE               	movwf	??_sprintf+2
   852  0054  082E               	movf	??_sprintf+2,w
   853  0055  00B7               	movwf	sprintf@c
   854  0056  08B7               	movf	sprintf@c,f
   855  0057  1903               	btfsc	3,2
   856  0058  2908               	goto	l1279
   857                           
   858                           ;doprnt.c: 547: if(c != '%')
   859  0059  0837               	movf	sprintf@c,w
   860  005A  3A25               	xorlw	37
   861  005B  1903               	skipnz
   862  005C  2868               	goto	l1233
   863                           
   864                           ;doprnt.c: 549: {
   865                           ;doprnt.c: 550: ((*sp++ = (c)));
   866  005D  0826               	movf	sprintf@sp,w
   867  005E  0086               	movwf	6
   868  005F  0827               	movf	sprintf@sp+1,w
   869  0060  0087               	movwf	7
   870  0061  0837               	movf	sprintf@c,w
   871  0062  0081               	movwf	1
   872  0063  3001               	movlw	1
   873  0064  07A6               	addwf	sprintf@sp,f
   874  0065  3000               	movlw	0
   875  0066  3DA7               	addwfc	sprintf@sp+1,f
   876                           
   877                           ;doprnt.c: 551: continue;
   878  0067  2847               	goto	l1277
   879  0068                     l1233:	
   880                           
   881                           ;doprnt.c: 552: }
   882                           ;doprnt.c: 557: flag = 0;
   883  0068  01B1               	clrf	sprintf@flag
   884                           
   885                           ;doprnt.c: 831: }
   886                           
   887                           ;doprnt.c: 822: continue;
   888                           
   889                           ;doprnt.c: 811: default:
   890                           
   891                           ;doprnt.c: 707: case 'i':
   892                           ;doprnt.c: 708: break;
   893                           
   894                           ;doprnt.c: 706: case 'd':
   895                           
   896                           ;doprnt.c: 647: goto alldone;
   897                           
   898                           ;doprnt.c: 646: case 0:
   899                           
   900                           ;doprnt.c: 644: switch(c = *f++) {
   901  0069  0829               	movf	sprintf@f+1,w
   902  006A  00AD               	movwf	??_sprintf+1
   903  006B  0828               	movf	sprintf@f,w
   904  006C  00AC               	movwf	??_sprintf
   905  006D  0AA8               	incf	sprintf@f,f
   906  006E  1903               	skipnz
   907  006F  0AA9               	incf	sprintf@f+1,f
   908  0070  082C               	movf	??_sprintf,w
   909  0071  0084               	movwf	4
   910  0072  082D               	movf	??_sprintf+1,w
   911  0073  0085               	movwf	5
   912  0074  0800               	movf	0,w	;code access
   913  0075  00B7               	movwf	sprintf@c
   914                           
   915                           ; Switch size 1, requested type "space"
   916                           ; Number of cases is 3, Range of values is 0 to 105
   917                           ; switch strategies available:
   918                           ; Name         Instructions Cycles
   919                           ; simple_byte           10     6 (average)
   920                           ; direct_byte          218     6 (fixed)
   921                           ; jumptable            260     6 (fixed)
   922                           ;	Chosen strategy is simple_byte
   923  0076  3A00               	xorlw	0	; case 0
   924  0077  1903               	skipnz
   925  0078  2908               	goto	l1279
   926  0079  3A64               	xorlw	100	; case 100
   927  007A  1903               	skipnz
   928  007B  2880               	goto	l1239
   929  007C  3A0D               	xorlw	13	; case 105
   930  007D  1903               	skipnz
   931  007E  2880               	goto	l1239
   932  007F  2847               	goto	l1277
   933  0080                     l1239:	
   934                           
   935                           ;doprnt.c: 1262: {
   936                           ;doprnt.c: 1268: _val._val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
   937  0080  0830               	movf	sprintf@ap,w
   938  0081  0086               	movwf	6
   939  0082  0187               	clrf	7
   940  0083  3F40               	moviw [0]fsr1
   941  0084  00B3               	movwf	sprintf@_val
   942  0085  3F41               	moviw [1]fsr1
   943  0086  00B4               	movwf	sprintf@_val+1
   944  0087  3002               	movlw	2
   945  0088  00AC               	movwf	??_sprintf
   946  0089  082C               	movf	??_sprintf,w
   947  008A  07B0               	addwf	sprintf@ap,f
   948                           
   949                           ;doprnt.c: 1270: if((int)_val._val < 0) {
   950  008B  1FB4               	btfss	sprintf@_val+1,7
   951  008C  2896               	goto	l1249
   952                           
   953                           ;doprnt.c: 1271: flag |= 0x03;
   954  008D  3003               	movlw	3
   955  008E  00AC               	movwf	??_sprintf
   956  008F  082C               	movf	??_sprintf,w
   957  0090  04B1               	iorwf	sprintf@flag,f
   958                           
   959                           ;doprnt.c: 1272: _val._val = -_val._val;
   960  0091  09B3               	comf	sprintf@_val,f
   961  0092  09B4               	comf	sprintf@_val+1,f
   962  0093  0AB3               	incf	sprintf@_val,f
   963  0094  1903               	skipnz
   964  0095  0AB4               	incf	sprintf@_val+1,f
   965  0096                     l1249:	
   966                           
   967                           ;doprnt.c: 1273: }
   968                           ;doprnt.c: 1275: }
   969                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
   970  0096  01B7               	clrf	sprintf@c
   971  0097  0AB7               	incf	sprintf@c,f
   972  0098  0837               	movf	sprintf@c,w
   973  0099  3A05               	xorlw	5
   974  009A  1903               	btfsc	3,2
   975  009B  28BB               	goto	l1261
   976  009C                     l1253:	
   977                           
   978                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
   979  009C  0837               	movf	sprintf@c,w
   980  009D  00AC               	movwf	??_sprintf
   981  009E  01AD               	clrf	??_sprintf+1
   982  009F  35AC               	lslf	??_sprintf,f
   983  00A0  0DAD               	rlf	??_sprintf+1,f
   984  00A1  3000               	movlw	low (_dpowers| (0+32768))
   985  00A2  072C               	addwf	??_sprintf,w
   986  00A3  0084               	movwf	4
   987  00A4  3083               	movlw	high (_dpowers| (0+32768))
   988  00A5  3D2D               	addwfc	??_sprintf+1,w
   989  00A6  0085               	movwf	5
   990  00A7  3F00               	moviw [0]fsr0
   991  00A8  00AE               	movwf	??_sprintf+2
   992  00A9  3F01               	moviw [1]fsr0
   993  00AA  00AF               	movwf	??_sprintf+3
   994  00AB  082F               	movf	??_sprintf+3,w
   995  00AC  0234               	subwf	sprintf@_val+1,w
   996  00AD  1D03               	skipz
   997  00AE  28B1               	goto	u1055
   998  00AF  082E               	movf	??_sprintf+2,w
   999  00B0  0233               	subwf	sprintf@_val,w
  1000  00B1                     u1055:	
  1001  00B1  1C03               	btfss	3,0
  1002  00B2  28BB               	goto	l1261
  1003                           
  1004                           ;doprnt.c: 1316: break;
  1005  00B3  3001               	movlw	1
  1006  00B4  00AC               	movwf	??_sprintf
  1007  00B5  082C               	movf	??_sprintf,w
  1008  00B6  07B7               	addwf	sprintf@c,f
  1009  00B7  0837               	movf	sprintf@c,w
  1010  00B8  3A05               	xorlw	5
  1011  00B9  1D03               	skipz
  1012  00BA  289C               	goto	l1253
  1013  00BB                     l1261:	
  1014                           
  1015                           ;doprnt.c: 1431: {
  1016                           ;doprnt.c: 1447: if(flag & 0x03)
  1017  00BB  0831               	movf	sprintf@flag,w
  1018  00BC  3903               	andlw	3
  1019  00BD  1903               	btfsc	3,2
  1020  00BE  28C9               	goto	l1267
  1021                           
  1022                           ;doprnt.c: 1448: ((*sp++ = ('-')));
  1023  00BF  0826               	movf	sprintf@sp,w
  1024  00C0  0086               	movwf	6
  1025  00C1  0827               	movf	sprintf@sp+1,w
  1026  00C2  0087               	movwf	7
  1027  00C3  302D               	movlw	45
  1028  00C4  0081               	movwf	1
  1029  00C5  3001               	movlw	1
  1030  00C6  07A6               	addwf	sprintf@sp,f
  1031  00C7  3000               	movlw	0
  1032  00C8  3DA7               	addwfc	sprintf@sp+1,f
  1033  00C9                     l1267:	
  1034                           
  1035                           ;doprnt.c: 1478: }
  1036                           ;doprnt.c: 1481: prec = c;
  1037  00C9  0837               	movf	sprintf@c,w
  1038  00CA  00AC               	movwf	??_sprintf
  1039  00CB  082C               	movf	??_sprintf,w
  1040  00CC  00B2               	movwf	sprintf@prec
  1041  00CD                     l1275:	
  1042                           ;doprnt.c: 1483: while(prec--) {
  1043                           
  1044  00CD  30FF               	movlw	-1
  1045  00CE  00AC               	movwf	??_sprintf
  1046  00CF  082C               	movf	??_sprintf,w
  1047  00D0  07B2               	addwf	sprintf@prec,f
  1048  00D1  0832               	movf	sprintf@prec,w
  1049  00D2  3AFF               	xorlw	255
  1050  00D3  1903               	btfsc	3,2
  1051  00D4  2847               	goto	l1277
  1052                           
  1053                           ;doprnt.c: 1487: {
  1054                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  1055  00D5  300A               	movlw	10
  1056  00D6  00A0               	movwf	___lwmod@divisor
  1057  00D7  3000               	movlw	0
  1058  00D8  00A1               	movwf	___lwmod@divisor+1
  1059  00D9  0832               	movf	sprintf@prec,w
  1060  00DA  00AC               	movwf	??_sprintf
  1061  00DB  01AD               	clrf	??_sprintf+1
  1062  00DC  35AC               	lslf	??_sprintf,f
  1063  00DD  0DAD               	rlf	??_sprintf+1,f
  1064  00DE  3000               	movlw	low (_dpowers| (0+32768))
  1065  00DF  072C               	addwf	??_sprintf,w
  1066  00E0  0084               	movwf	4
  1067  00E1  3083               	movlw	high (_dpowers| (0+32768))
  1068  00E2  3D2D               	addwfc	??_sprintf+1,w
  1069  00E3  0085               	movwf	5
  1070  00E4  3F00               	moviw [0]fsr0
  1071  00E5  00F2               	movwf	___lwdiv@divisor
  1072  00E6  3F01               	moviw [1]fsr0
  1073  00E7  00F3               	movwf	___lwdiv@divisor+1
  1074  00E8  0834               	movf	sprintf@_val+1,w
  1075  00E9  01F5               	clrf	___lwdiv@dividend+1
  1076  00EA  07F5               	addwf	___lwdiv@dividend+1,f
  1077  00EB  0833               	movf	sprintf@_val,w
  1078  00EC  01F4               	clrf	___lwdiv@dividend
  1079  00ED  07F4               	addwf	___lwdiv@dividend,f
  1080  00EE  21F9               	fcall	___lwdiv
  1081  00EF  0873               	movf	?___lwdiv+1,w
  1082  00F0  0020               	movlb	0	; select bank0
  1083  00F1  01A3               	clrf	___lwmod@dividend+1
  1084  00F2  07A3               	addwf	___lwmod@dividend+1,f
  1085  00F3  0872               	movf	?___lwdiv,w
  1086  00F4  01A2               	clrf	___lwmod@dividend
  1087  00F5  07A2               	addwf	___lwmod@dividend,f
  1088  00F6  222F               	fcall	___lwmod
  1089  00F7  0020               	movlb	0	; select bank0
  1090  00F8  0820               	movf	?___lwmod,w
  1091  00F9  3E30               	addlw	48
  1092  00FA  00AE               	movwf	??_sprintf+2
  1093  00FB  082E               	movf	??_sprintf+2,w
  1094  00FC  00B7               	movwf	sprintf@c
  1095                           
  1096                           ;doprnt.c: 1532: }
  1097                           ;doprnt.c: 1533: ((*sp++ = (c)));
  1098  00FD  0826               	movf	sprintf@sp,w
  1099  00FE  0086               	movwf	6
  1100  00FF  0827               	movf	sprintf@sp+1,w
  1101  0100  0087               	movwf	7
  1102  0101  0837               	movf	sprintf@c,w
  1103  0102  0081               	movwf	1
  1104  0103  3001               	movlw	1
  1105  0104  07A6               	addwf	sprintf@sp,f
  1106  0105  3000               	movlw	0
  1107  0106  3DA7               	addwfc	sprintf@sp+1,f
  1108  0107  28CD               	goto	l1275
  1109  0108                     l1279:	
  1110                           ;doprnt.c: 1534: }
  1111                           ;doprnt.c: 1542: }
  1112                           ;doprnt.c: 1544: alldone:
  1113                           
  1114                           
  1115                           ;doprnt.c: 1547: *sp = 0;
  1116  0108  0826               	movf	sprintf@sp,w
  1117  0109  0086               	movwf	6
  1118  010A  0827               	movf	sprintf@sp+1,w
  1119  010B  0087               	movwf	7
  1120  010C  0181               	clrf	1
  1121  010D  0008               	return
  1122  010E                     __end_of_sprintf:	
  1123                           ;doprnt.c: 1549: return 0;
  1124                           ;	Return value of _sprintf is never used
  1125                           
  1126                           
  1127                           	psect	text3
  1128  022F                     __ptext3:	
  1129 ;; *************** function ___lwmod *****************
  1130 ;; Defined at:
  1131 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwmod.c"
  1132 ;; Parameters:    Size  Location     Type
  1133 ;;  divisor         2    0[BANK0 ] unsigned int 
  1134 ;;  dividend        2    2[BANK0 ] unsigned int 
  1135 ;; Auto vars:     Size  Location     Type
  1136 ;;  counter         1    5[BANK0 ] unsigned char 
  1137 ;; Return value:  Size  Location     Type
  1138 ;;                  2    0[BANK0 ] unsigned int 
  1139 ;; Registers used:
  1140 ;;		wreg, status,2, status,0
  1141 ;; Tracked objects:
  1142 ;;		On entry : 0/0
  1143 ;;		On exit  : 0/0
  1144 ;;		Unchanged: 0/0
  1145 ;; Data sizes:     COMMON   BANK0   BANK1
  1146 ;;      Params:         0       4       0
  1147 ;;      Locals:         0       1       0
  1148 ;;      Temps:          0       1       0
  1149 ;;      Totals:         0       6       0
  1150 ;;Total ram usage:        6 bytes
  1151 ;; Hardware stack levels used:    1
  1152 ;; Hardware stack levels required when called:    1
  1153 ;; This function calls:
  1154 ;;		Nothing
  1155 ;; This function is called by:
  1156 ;;		_sprintf
  1157 ;; This function uses a non-reentrant model
  1158 ;;
  1159                           
  1160                           
  1161                           ;psect for function ___lwmod
  1162  022F                     ___lwmod:	
  1163                           
  1164                           ;incstack = 0
  1165                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1166  022F  0020               	movlb	0	; select bank0
  1167  0230  0821               	movf	___lwmod@divisor+1,w
  1168  0231  0420               	iorwf	___lwmod@divisor,w
  1169  0232  1903               	skipnz
  1170  0233  2A57               	goto	l1221
  1171  0234  01A5               	clrf	___lwmod@counter
  1172  0235  0AA5               	incf	___lwmod@counter,f
  1173  0236                     l1211:	
  1174  0236  1BA1               	btfsc	___lwmod@divisor+1,7
  1175  0237  2A42               	goto	l1213
  1176  0238  3001               	movlw	1
  1177  0239                     u975:	
  1178  0239  35A0               	lslf	___lwmod@divisor,f
  1179  023A  0DA1               	rlf	___lwmod@divisor+1,f
  1180  023B  0B89               	decfsz	9,f
  1181  023C  2A39               	goto	u975
  1182  023D  3001               	movlw	1
  1183  023E  00A4               	movwf	??___lwmod
  1184  023F  0824               	movf	??___lwmod,w
  1185  0240  07A5               	addwf	___lwmod@counter,f
  1186  0241  2A36               	goto	l1211
  1187  0242                     l1213:	
  1188  0242  0821               	movf	___lwmod@divisor+1,w
  1189  0243  0223               	subwf	___lwmod@dividend+1,w
  1190  0244  1D03               	skipz
  1191  0245  2A48               	goto	u995
  1192  0246  0820               	movf	___lwmod@divisor,w
  1193  0247  0222               	subwf	___lwmod@dividend,w
  1194  0248                     u995:	
  1195  0248  1C03               	skipc
  1196  0249  2A4E               	goto	l1217
  1197  024A  0820               	movf	___lwmod@divisor,w
  1198  024B  02A2               	subwf	___lwmod@dividend,f
  1199  024C  0821               	movf	___lwmod@divisor+1,w
  1200  024D  3BA3               	subwfb	___lwmod@dividend+1,f
  1201  024E                     l1217:	
  1202  024E  3001               	movlw	1
  1203  024F                     u1005:	
  1204  024F  36A1               	lsrf	___lwmod@divisor+1,f
  1205  0250  0CA0               	rrf	___lwmod@divisor,f
  1206  0251  0B89               	decfsz	9,f
  1207  0252  2A4F               	goto	u1005
  1208  0253  3001               	movlw	1
  1209  0254  02A5               	subwf	___lwmod@counter,f
  1210  0255  1D03               	btfss	3,2
  1211  0256  2A42               	goto	l1213
  1212  0257                     l1221:	
  1213  0257  0823               	movf	___lwmod@dividend+1,w
  1214  0258  01A1               	clrf	?___lwmod+1
  1215  0259  07A1               	addwf	?___lwmod+1,f
  1216  025A  0822               	movf	___lwmod@dividend,w
  1217  025B  01A0               	clrf	?___lwmod
  1218  025C  07A0               	addwf	?___lwmod,f
  1219  025D  0008               	return
  1220  025E                     __end_of___lwmod:	
  1221                           
  1222                           	psect	text4
  1223  01F9                     __ptext4:	
  1224 ;; *************** function ___lwdiv *****************
  1225 ;; Defined at:
  1226 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwdiv.c"
  1227 ;; Parameters:    Size  Location     Type
  1228 ;;  divisor         2    2[COMMON] unsigned int 
  1229 ;;  dividend        2    4[COMMON] unsigned int 
  1230 ;; Auto vars:     Size  Location     Type
  1231 ;;  quotient        2    7[COMMON] unsigned int 
  1232 ;;  counter         1    9[COMMON] unsigned char 
  1233 ;; Return value:  Size  Location     Type
  1234 ;;                  2    2[COMMON] unsigned int 
  1235 ;; Registers used:
  1236 ;;		wreg, status,2, status,0
  1237 ;; Tracked objects:
  1238 ;;		On entry : 0/0
  1239 ;;		On exit  : 0/0
  1240 ;;		Unchanged: 0/0
  1241 ;; Data sizes:     COMMON   BANK0   BANK1
  1242 ;;      Params:         4       0       0
  1243 ;;      Locals:         3       0       0
  1244 ;;      Temps:          1       0       0
  1245 ;;      Totals:         8       0       0
  1246 ;;Total ram usage:        8 bytes
  1247 ;; Hardware stack levels used:    1
  1248 ;; Hardware stack levels required when called:    1
  1249 ;; This function calls:
  1250 ;;		Nothing
  1251 ;; This function is called by:
  1252 ;;		_sprintf
  1253 ;; This function uses a non-reentrant model
  1254 ;;
  1255                           
  1256                           
  1257                           ;psect for function ___lwdiv
  1258  01F9                     ___lwdiv:	
  1259                           
  1260                           ;incstack = 0
  1261                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1262  01F9  01F7               	clrf	___lwdiv@quotient
  1263  01FA  01F8               	clrf	___lwdiv@quotient+1
  1264  01FB  0873               	movf	___lwdiv@divisor+1,w
  1265  01FC  0472               	iorwf	___lwdiv@divisor,w
  1266  01FD  1903               	skipnz
  1267  01FE  2A28               	goto	l1005
  1268  01FF  01F9               	clrf	___lwdiv@counter
  1269  0200  0AF9               	incf	___lwdiv@counter,f
  1270  0201                     l993:	
  1271  0201  1BF3               	btfsc	___lwdiv@divisor+1,7
  1272  0202  2A0D               	goto	l995
  1273  0203  3001               	movlw	1
  1274  0204                     u635:	
  1275  0204  35F2               	lslf	___lwdiv@divisor,f
  1276  0205  0DF3               	rlf	___lwdiv@divisor+1,f
  1277  0206  0B89               	decfsz	9,f
  1278  0207  2A04               	goto	u635
  1279  0208  3001               	movlw	1
  1280  0209  00F6               	movwf	??___lwdiv
  1281  020A  0876               	movf	??___lwdiv,w
  1282  020B  07F9               	addwf	___lwdiv@counter,f
  1283  020C  2A01               	goto	l993
  1284  020D                     l995:	
  1285  020D  3001               	movlw	1
  1286  020E                     u655:	
  1287  020E  35F7               	lslf	___lwdiv@quotient,f
  1288  020F  0DF8               	rlf	___lwdiv@quotient+1,f
  1289  0210  0B89               	decfsz	9,f
  1290  0211  2A0E               	goto	u655
  1291  0212  0873               	movf	___lwdiv@divisor+1,w
  1292  0213  0275               	subwf	___lwdiv@dividend+1,w
  1293  0214  1D03               	skipz
  1294  0215  2A18               	goto	u665
  1295  0216  0872               	movf	___lwdiv@divisor,w
  1296  0217  0274               	subwf	___lwdiv@dividend,w
  1297  0218                     u665:	
  1298  0218  1C03               	skipc
  1299  0219  2A1F               	goto	l1001
  1300  021A  0872               	movf	___lwdiv@divisor,w
  1301  021B  02F4               	subwf	___lwdiv@dividend,f
  1302  021C  0873               	movf	___lwdiv@divisor+1,w
  1303  021D  3BF5               	subwfb	___lwdiv@dividend+1,f
  1304  021E  1477               	bsf	___lwdiv@quotient,0
  1305  021F                     l1001:	
  1306  021F  3001               	movlw	1
  1307  0220                     u675:	
  1308  0220  36F3               	lsrf	___lwdiv@divisor+1,f
  1309  0221  0CF2               	rrf	___lwdiv@divisor,f
  1310  0222  0B89               	decfsz	9,f
  1311  0223  2A20               	goto	u675
  1312  0224  3001               	movlw	1
  1313  0225  02F9               	subwf	___lwdiv@counter,f
  1314  0226  1D03               	btfss	3,2
  1315  0227  2A0D               	goto	l995
  1316  0228                     l1005:	
  1317  0228  0878               	movf	___lwdiv@quotient+1,w
  1318  0229  01F3               	clrf	?___lwdiv+1
  1319  022A  07F3               	addwf	?___lwdiv+1,f
  1320  022B  0877               	movf	___lwdiv@quotient,w
  1321  022C  01F2               	clrf	?___lwdiv
  1322  022D  07F2               	addwf	?___lwdiv,f
  1323  022E  0008               	return
  1324  022F                     __end_of___lwdiv:	
  1325                           
  1326                           	psect	text5
  1327  010E                     __ptext5:	
  1328 ;; *************** function _InfraredRecive *****************
  1329 ;; Defined at:
  1330 ;;		line 133 in file "skInfraredCOM.c"
  1331 ;; Parameters:    Size  Location     Type
  1332 ;;  MyDeviceNo      1    wreg     unsigned char 
  1333 ;; Auto vars:     Size  Location     Type
  1334 ;;  MyDeviceNo      1    0[COMMON] unsigned char 
  1335 ;;  IRbit          26    0[BANK0 ] unsigned char [26]
  1336 ;;  t               4   28[BANK0 ] unsigned long 
  1337 ;;  i               2   32[BANK0 ] int 
  1338 ;;  ans             2   26[BANK0 ] int 
  1339 ;; Return value:  Size  Location     Type
  1340 ;;                  2    2[COMMON] int 
  1341 ;; Registers used:
  1342 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  1343 ;; Tracked objects:
  1344 ;;		On entry : 0/0
  1345 ;;		On exit  : 0/0
  1346 ;;		Unchanged: 0/0
  1347 ;; Data sizes:     COMMON   BANK0   BANK1
  1348 ;;      Params:         2       0       0
  1349 ;;      Locals:         0      34       0
  1350 ;;      Temps:          1       0       0
  1351 ;;      Totals:         3      34       0
  1352 ;;Total ram usage:       37 bytes
  1353 ;; Hardware stack levels used:    1
  1354 ;; Hardware stack levels required when called:    1
  1355 ;; This function calls:
  1356 ;;		Nothing
  1357 ;; This function is called by:
  1358 ;;		_main
  1359 ;; This function uses a non-reentrant model
  1360 ;;
  1361                           
  1362                           
  1363                           ;psect for function _InfraredRecive
  1364  010E                     _InfraredRecive:	
  1365                           
  1366                           ;skInfraredCOM.c: 135: char IRbit[26] ;
  1367                           ;skInfraredCOM.c: 136: unsigned long t ;
  1368                           ;skInfraredCOM.c: 137: int ans , i ;
  1369                           ;skInfraredCOM.c: 139: ans = 0 ;
  1370                           
  1371                           ;incstack = 0
  1372                           ; Regs used in _InfraredRecive: [wreg+fsr1l+fsr1h+status,2+status,0]
  1373  010E  0020               	movlb	0	; select bank0
  1374  010F  01BA               	clrf	InfraredRecive@ans
  1375  0110  01BB               	clrf	InfraredRecive@ans+1
  1376                           
  1377                           ;skInfraredCOM.c: 140: t = 0 ;
  1378  0111  3000               	movlw	0
  1379  0112  00BF               	movwf	InfraredRecive@t+3
  1380  0113  3000               	movlw	0
  1381  0114  00BE               	movwf	InfraredRecive@t+2
  1382  0115  3000               	movlw	0
  1383  0116  00BD               	movwf	InfraredRecive@t+1
  1384  0117  3000               	movlw	0
  1385  0118  00BC               	movwf	InfraredRecive@t
  1386                           
  1387                           ;skInfraredCOM.c: 142: if (RA0 == 0) {
  1388  0119  180C               	btfsc	12,0	;volatile
  1389  011A  2934               	goto	l1043
  1390                           
  1391                           ;skInfraredCOM.c: 144: t = 0 ;
  1392  011B  3000               	movlw	0
  1393  011C  00BF               	movwf	InfraredRecive@t+3
  1394  011D  3000               	movlw	0
  1395  011E  00BE               	movwf	InfraredRecive@t+2
  1396  011F  3000               	movlw	0
  1397  0120  00BD               	movwf	InfraredRecive@t+1
  1398  0121  3000               	movlw	0
  1399  0122  00BC               	movwf	InfraredRecive@t
  1400  0123                     l1041:	
  1401                           ;skInfraredCOM.c: 145: while (RA0 == 0) {
  1402                           
  1403  0123  180C               	btfsc	12,0	;volatile
  1404  0124  2934               	goto	l1043
  1405                           
  1406                           ;skInfraredCOM.c: 146: _delay((unsigned long)((10)*(32000000/4000000.0))) ;
  1407  0125  301A               	movlw	26
  1408  0126  00F4               	movwf	??_InfraredRecive
  1409  0127                     u1137:	
  1410  0127  0BF4               	decfsz	??_InfraredRecive,f
  1411  0128  2927               	goto	u1137
  1412  0129  0000               	nop
  1413                           
  1414                           ;skInfraredCOM.c: 147: t++ ;
  1415  012A  3001               	movlw	1
  1416  012B  0020               	movlb	0	; select bank0
  1417  012C  07BC               	addwf	InfraredRecive@t,f
  1418  012D  3000               	movlw	0
  1419  012E  3DBD               	addwfc	InfraredRecive@t+1,f
  1420  012F  3000               	movlw	0
  1421  0130  3DBE               	addwfc	InfraredRecive@t+2,f
  1422  0131  3000               	movlw	0
  1423  0132  3DBF               	addwfc	InfraredRecive@t+3,f
  1424  0133  2923               	goto	l1041
  1425  0134                     l1043:	
  1426                           
  1427                           ;skInfraredCOM.c: 149: }
  1428                           ;skInfraredCOM.c: 150: }
  1429                           ;skInfraredCOM.c: 152: if (t >= 300) {
  1430  0134  3000               	movlw	0
  1431  0135  023F               	subwf	InfraredRecive@t+3,w
  1432  0136  1D03               	skipz
  1433  0137  2942               	goto	u775
  1434  0138  3000               	movlw	0
  1435  0139  023E               	subwf	InfraredRecive@t+2,w
  1436  013A  1D03               	skipz
  1437  013B  2942               	goto	u775
  1438  013C  3001               	movlw	1
  1439  013D  023D               	subwf	InfraredRecive@t+1,w
  1440  013E  1D03               	skipz
  1441  013F  2942               	goto	u775
  1442  0140  302C               	movlw	44
  1443  0141  023C               	subwf	InfraredRecive@t,w
  1444  0142                     u775:	
  1445  0142  1C03               	skipc
  1446  0143  2987               	goto	l1069
  1447                           
  1448                           ;skInfraredCOM.c: 153: RA2 = 1;
  1449  0144  150C               	bsf	12,2	;volatile
  1450                           
  1451                           ;skInfraredCOM.c: 154: i = 0 ;
  1452  0145  01C0               	clrf	InfraredRecive@i
  1453  0146  01C1               	clrf	InfraredRecive@i+1
  1454  0147                     l140:	
  1455                           ;skInfraredCOM.c: 155: while(RA0 == 1) ;
  1456                           
  1457  0147  180C               	btfsc	12,0	;volatile
  1458  0148  2947               	goto	l140
  1459  0149                     l144:	
  1460                           ;skInfraredCOM.c: 158: while(RA0 == 0) ;
  1461                           
  1462                           ;skInfraredCOM.c: 157: while (1) {
  1463                           
  1464  0149  1C0C               	btfss	12,0	;volatile
  1465  014A  2949               	goto	l144
  1466                           
  1467                           ;skInfraredCOM.c: 159: t = 0 ;
  1468  014B  3000               	movlw	0
  1469  014C  00BF               	movwf	InfraredRecive@t+3
  1470  014D  3000               	movlw	0
  1471  014E  00BE               	movwf	InfraredRecive@t+2
  1472  014F  3000               	movlw	0
  1473  0150  00BD               	movwf	InfraredRecive@t+1
  1474  0151  3000               	movlw	0
  1475  0152  00BC               	movwf	InfraredRecive@t
  1476  0153                     l1053:	
  1477                           ;skInfraredCOM.c: 160: while(RA0 == 1) {
  1478                           
  1479  0153  1C0C               	btfss	12,0	;volatile
  1480  0154  2964               	goto	l1055
  1481                           
  1482                           ;skInfraredCOM.c: 161: _delay((unsigned long)((10)*(32000000/4000000.0))) ;
  1483  0155  301A               	movlw	26
  1484  0156  00F4               	movwf	??_InfraredRecive
  1485  0157                     u1147:	
  1486  0157  0BF4               	decfsz	??_InfraredRecive,f
  1487  0158  2957               	goto	u1147
  1488  0159  0000               	nop
  1489                           
  1490                           ;skInfraredCOM.c: 162: t++ ;
  1491  015A  3001               	movlw	1
  1492  015B  0020               	movlb	0	; select bank0
  1493  015C  07BC               	addwf	InfraredRecive@t,f
  1494  015D  3000               	movlw	0
  1495  015E  3DBD               	addwfc	InfraredRecive@t+1,f
  1496  015F  3000               	movlw	0
  1497  0160  3DBE               	addwfc	InfraredRecive@t+2,f
  1498  0161  3000               	movlw	0
  1499  0162  3DBF               	addwfc	InfraredRecive@t+3,f
  1500  0163  2953               	goto	l1053
  1501  0164                     l1055:	
  1502                           
  1503                           ;skInfraredCOM.c: 163: }
  1504                           ;skInfraredCOM.c: 164: if (t >= 50) IRbit[i] = (char)0x31 ;
  1505  0164  3000               	movlw	0
  1506  0165  023F               	subwf	InfraredRecive@t+3,w
  1507  0166  1D03               	skipz
  1508  0167  2972               	goto	u815
  1509  0168  3000               	movlw	0
  1510  0169  023E               	subwf	InfraredRecive@t+2,w
  1511  016A  1D03               	skipz
  1512  016B  2972               	goto	u815
  1513  016C  3000               	movlw	0
  1514  016D  023D               	subwf	InfraredRecive@t+1,w
  1515  016E  1D03               	skipz
  1516  016F  2972               	goto	u815
  1517  0170  3032               	movlw	50
  1518  0171  023C               	subwf	InfraredRecive@t,w
  1519  0172                     u815:	
  1520  0172  1C03               	skipc
  1521  0173  2976               	goto	l1059
  1522  0174  3031               	movlw	49
  1523  0175  2977               	goto	L1
  1524  0176                     l1059:	
  1525                           
  1526                           ;skInfraredCOM.c: 165: else IRbit[i] = (char)0x30 ;
  1527  0176  3030               	movlw	48
  1528  0177                     L1:	
  1529  0177  00F4               	movwf	??_InfraredRecive
  1530  0178  0840               	movf	InfraredRecive@i,w
  1531  0179  3E20               	addlw	InfraredRecive@IRbit& (0+255)
  1532  017A  0086               	movwf	6
  1533  017B  0187               	clrf	7
  1534  017C  0874               	movf	??_InfraredRecive,w
  1535  017D  0081               	movwf	1
  1536                           
  1537                           ;skInfraredCOM.c: 166: i++ ;
  1538  017E  3001               	movlw	1
  1539  017F  07C0               	addwf	InfraredRecive@i,f
  1540  0180  3000               	movlw	0
  1541  0181  3DC1               	addwfc	InfraredRecive@i+1,f
  1542                           
  1543                           ;skInfraredCOM.c: 167: if (i == 24) break ;
  1544  0182  3018               	movlw	24
  1545  0183  0640               	xorwf	InfraredRecive@i,w
  1546  0184  0441               	iorwf	InfraredRecive@i+1,w
  1547  0185  1D03               	skipz
  1548  0186  2949               	goto	l144
  1549  0187                     l1069:	
  1550                           
  1551                           ;skInfraredCOM.c: 172: }
  1552                           ;skInfraredCOM.c: 173: }
  1553                           ;skInfraredCOM.c: 174: return( ans ) ;
  1554  0187  083B               	movf	InfraredRecive@ans+1,w
  1555  0188  01F3               	clrf	?_InfraredRecive+1
  1556  0189  07F3               	addwf	?_InfraredRecive+1,f
  1557  018A  083A               	movf	InfraredRecive@ans,w
  1558  018B  01F2               	clrf	?_InfraredRecive
  1559  018C  07F2               	addwf	?_InfraredRecive,f
  1560  018D  0008               	return
  1561  018E                     __end_of_InfraredRecive:	
  1562                           
  1563                           	psect	intentry
  1564  0004                     __pintentry:	
  1565 ;; *************** function _InterTimer *****************
  1566 ;; Defined at:
  1567 ;;		line 99 in file "main.c"
  1568 ;; Parameters:    Size  Location     Type
  1569 ;;		None
  1570 ;; Auto vars:     Size  Location     Type
  1571 ;;		None
  1572 ;; Return value:  Size  Location     Type
  1573 ;;		None               void
  1574 ;; Registers used:
  1575 ;;		wreg, status,2, status,0
  1576 ;; Tracked objects:
  1577 ;;		On entry : 0/0
  1578 ;;		On exit  : 0/0
  1579 ;;		Unchanged: 0/0
  1580 ;; Data sizes:     COMMON   BANK0   BANK1
  1581 ;;      Params:         0       0       0
  1582 ;;      Locals:         0       0       0
  1583 ;;      Temps:          2       0       0
  1584 ;;      Totals:         2       0       0
  1585 ;;Total ram usage:        2 bytes
  1586 ;; Hardware stack levels used:    1
  1587 ;; This function calls:
  1588 ;;		Nothing
  1589 ;; This function is called by:
  1590 ;;		Interrupt level 1
  1591 ;; This function uses a non-reentrant model
  1592 ;;
  1593                           
  1594  0004                     _InterTimer:	
  1595                           
  1596                           ;incstack = 0
  1597                           ; Regs used in _InterTimer: [wreg+status,2+status,0]
  1598  0004  147E               	bsf	126,0	;set compiler interrupt flag
  1599  0005  3180               	pagesel	$
  1600  0006  0020               	movlb	0	; select bank0
  1601  0007  087F               	movf	127,w
  1602  0008  00F1               	movwf	??_InterTimer+1
  1603                           
  1604                           ;main.c: 100: if (TMR0IF == 1) {
  1605  0009  1D0B               	btfss	11,2	;volatile
  1606  000A  282B               	goto	i1l65
  1607                           
  1608                           ;main.c: 101: TMR0 = 61;
  1609  000B  303D               	movlw	61
  1610  000C  0095               	movwf	21	;volatile
  1611                           
  1612                           ;main.c: 102: Count++;
  1613  000D  3001               	movlw	1
  1614  000E  07CF               	addwf	_Count,f
  1615  000F  3000               	movlw	0
  1616  0010  3DD0               	addwfc	_Count+1,f
  1617                           
  1618                           ;main.c: 103: TMR0IF = 0;
  1619  0011  110B               	bcf	11,2	;volatile
  1620                           
  1621                           ;main.c: 104: if (Count >= 40) {
  1622  0012  0850               	movf	_Count+1,w
  1623  0013  3A80               	xorlw	128
  1624  0014  00F0               	movwf	??_InterTimer
  1625  0015  3080               	movlw	128
  1626  0016  0270               	subwf	??_InterTimer,w
  1627  0017  1D03               	skipz
  1628  0018  281B               	goto	u94_25
  1629  0019  3028               	movlw	40
  1630  001A  024F               	subwf	_Count,w
  1631  001B                     u94_25:	
  1632  001B  1C03               	skipc
  1633  001C  282B               	goto	i1l65
  1634                           
  1635                           ;main.c: 105: Count = 0;
  1636  001D  0020               	movlb	0	; select bank0
  1637  001E  01CF               	clrf	_Count
  1638  001F  01D0               	clrf	_Count+1
  1639                           
  1640                           ;main.c: 107: if (LEDflg == 0) LEDflg = 1;
  1641  0020  0852               	movf	_LEDflg+1,w
  1642  0021  0451               	iorwf	_LEDflg,w
  1643  0022  1D03               	skipz
  1644  0023  2829               	goto	i1l1201
  1645  0024  3001               	movlw	1
  1646  0025  00D1               	movwf	_LEDflg
  1647  0026  3000               	movlw	0
  1648  0027  00D2               	movwf	_LEDflg+1
  1649  0028  282B               	goto	i1l65
  1650  0029                     i1l1201:	
  1651                           
  1652                           ;main.c: 108: else LEDflg = 0;
  1653  0029  01D1               	clrf	_LEDflg
  1654  002A  01D2               	clrf	_LEDflg+1
  1655  002B                     i1l65:	
  1656  002B  0871               	movf	??_InterTimer+1,w
  1657  002C  0020               	movlb	0	; select bank0
  1658  002D  00FF               	movwf	127
  1659  002E  107E               	bcf	126,0	;clear compiler interrupt flag
  1660  002F  0009               	retfie
  1661  0030                     __end_of_InterTimer:	
  1662  007E                     btemp	set	126	;btemp
  1663  007E                     pic14e$flags	set	126
  1664  007E                     wtemp	set	126
  1665  007E                     wtemp0	set	126
  1666  0080                     wtemp1	set	128
  1667  0082                     wtemp2	set	130
  1668  0084                     wtemp3	set	132
  1669  0086                     wtemp4	set	134
  1670  0088                     wtemp5	set	136
  1671  007F                     wtemp6	set	127
  1672  007E                     ttemp	set	126
  1673  007E                     ttemp0	set	126
  1674  0081                     ttemp1	set	129
  1675  0084                     ttemp2	set	132
  1676  0087                     ttemp3	set	135
  1677  007F                     ttemp4	set	127
  1678  007E                     ltemp	set	126
  1679  007E                     ltemp0	set	126
  1680  0082                     ltemp1	set	130
  1681  0086                     ltemp2	set	134
  1682  0080                     ltemp3	set	128


Data Sizes:
    Strings     12
    Constant    10
    Data        0
    BSS         14
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     39      51
    BANK1            32      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_1(CODE[12]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 0
		 -> main@str(BANK0[0]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S168$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    strOutUSART@str	PTR unsigned char  size(2) Largest target is 0
		 -> main@str(BANK0[0]), 


Critical Paths under _main in COMMON

    _sprintf->___lwdiv
    ___lwmod->___lwdiv

Critical Paths under _InterTimer in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_InfraredRecive
    _sprintf->___lwmod

Critical Paths under _InterTimer in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterTimer in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    1890
                                             34 BANK0      5     5      0
                     _InfraredRecive
                            _sprintf
                        _strOutUSART
 ---------------------------------------------------------------------------------
 (1) _strOutUSART                                          2     0      2      98
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             18    12      6    1456
                                              6 BANK0     18    12      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     362
                                              0 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     268
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _InfraredRecive                                      38    36      2     210
                                              2 COMMON     3     1      2
                                              0 BANK0     34    34      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _InterTimer                                           2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InfraredRecive
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
   _strOutUSART

 _InterTimer (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      3F       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     27      33       6       63.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      3F       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Fri Feb 13 14:47:16 2015

             __CFG_CP$OFF 0000                        l70 031D                       l140 0147  
                     l144 0149                       l993 0201                       l995 020D  
                     _GIE 005F                       _RA0 0060                       _RA1 0061  
                     _RA2 0062               _strOutUSART 0316                       _PR2 001B  
            __CFG_CPD$OFF 0000                       u635 0204                       u815 0172  
                     u655 020E                       u665 0218                       u675 0220  
                     u775 0142                       u975 0239                       u995 0248  
            __CFG_BORV$HI 0000                       wreg 0009              __CFG_LVP$OFF 0000  
                    l1001 021F                      l1005 0228                      l1041 0123  
                    l1043 0134                      l1211 0236                      l1053 0153  
                    l1213 0242                      l1221 0257                      l1055 0164  
                    l1217 024E                      l1233 0068                      l1137 0316  
                    l1059 0176                      l1069 0187                      l1261 00BB  
                    l1253 009C                      l1317 01BD                      l1239 0080  
                    l1249 0096                      l1275 00CD                      l1267 00C9  
                    l1277 0047                      l1279 0108                      STR_1 030A  
                    u1005 024F                      u1107 01B6                      u1117 01CF  
                    u1055 00B1                      u1127 01F2                      u1137 0127  
                    u1147 0157                      i1l65 002B                      _TMR0 0015  
                    _TMR2 001A              __CFG_WRT$OFF 0000                      _data 0047  
                    _main 018E                      fsr0h 0005                      fsr1h 0007  
                    fsr0l 0004                      indf0 0000                      indf1 0001  
                    fsr1l 0006                      btemp 007E             __CFG_BOREN$ON 0000  
                    ltemp 007E                      start 0030                      ttemp 007E  
                    wtemp 007E             __CFG_IESO$OFF 0000             __CFG_MCLRE$ON 0000  
            main@led_flag 007A                     ?_main 0070             __CFG_WDTE$OFF 0000  
                   _T2CON 001C           __end_of___lwdiv 022F           __end_of___lwmod 025E  
                   _RCSTA 019D                     _SPBRG 019B                     _PORTA 000C  
                   _TRISA 008C                     u94_25 001B                     _TXREG 019A  
                   _TXSTA 019E             __CFG_PWRTE$ON 0000                     _Count 004F  
          __CFG_FCMEN$OFF 0000           __end_of_dpowers 030A                     ltemp0 007E  
                   ltemp1 0082                     ltemp2 0086                     ltemp3 0080  
                   ttemp0 007E                     ttemp1 0081                     ttemp2 0084  
                   ttemp3 0087                     ttemp4 007F                     status 0003  
                   wtemp0 007E                     wtemp1 0080                     wtemp2 0082  
                   wtemp3 0084                     wtemp4 0086                     wtemp5 0088  
                   wtemp6 007F           __end_of_sprintf 010E           __initialization 0031  
            __end_of_main 01F9                    ??_main 0042                _InterTimer 0004  
          __CFG_PLLEN$OFF 0000            _InfraredRecive 010E                    _CCPR1H 0292  
                  _CCPR1L 0291                    i1l1201 0029                    _LEDflg 0051  
                  _OSCCON 0099                    _TMR0IE 005D                    _TMR0IF 005A  
                  _TMR2ON 00E2            __CFG_STVREN$ON 0000                 ??___lwdiv 0076  
               ??___lwmod 0024    __end_of_InfraredRecive 018E                 ??_sprintf 002C  
 __end_of__initialization 003F            __pcstackCOMMON 0070               ?_InterTimer 0070  
            ?_strOutUSART 0072           ?_InfraredRecive 0072                __pbssBANK0 0047  
              __pmaintext 018E                __pintentry 0004                   _CCP1CON 0293  
                 _RXDTSEL 08EF                   _TXCKSEL 08EA       __size_of_InterTimer 002C  
InfraredRecive@MyDeviceNo 0070                   ___lwdiv 01F9                   ___lwmod 022F  
                 __ptext1 0316                   __ptext2 0042                   __ptext3 022F  
                 __ptext4 01F9                   __ptext5 010E                   _dpowers 0300  
                 main@ans 0045                   _sprintf 0042                   main@str 0045  
    end_of_initialization 003F              __pstringtext 0300          __CFG_FOSC$INTOSC 0000  
    __size_of_strOutUSART 0016          ??_InfraredRecive 0074              ??_InterTimer 0070  
     start_initialization 0031        __end_of_InterTimer 0030               __pbssCOMMON 007A  
               ___latbits 0000             __pcstackBANK0 0020       __end_of__stringdata 0316  
             sprintf@_val 0033               sprintf@flag 0031               sprintf@prec 0032  
        ___lwdiv@dividend 0074                  ?___lwdiv 0072                  ?___lwmod 0020  
        ___lwdiv@quotient 0077                  ?_sprintf 0026                  _PIR1bits 0011  
         InfraredRecive@i 0040           InfraredRecive@t 003C               __stringdata 030A  
        __size_of___lwdiv 0036          __size_of___lwmod 002F             ??_strOutUSART 0074  
              _ANSELAbits 018C           ___lwdiv@divisor 0072           ___lwdiv@counter 0079  
        __size_of_sprintf 00CC             __size_of_main 006B            strOutUSART@str 0072  
             pic14e$flags 007E       __end_of_strOutUSART 032C                  intlevel1 0000  
               sprintf@ap 0030                 sprintf@sp 0026          ___lwmod@dividend 0022  
       __CFG_CLKOUTEN$OFF 0000       InfraredRecive@IRbit 0020                _OPTION_REG 0095  
                sprintf@c 0037                  sprintf@f 0028           ___lwmod@divisor 0020  
         ___lwmod@counter 0025   __size_of_InfraredRecive 0080         InfraredRecive@ans 003A  
